1、什么是集合
	把具有相同性质的一类东西，汇聚成一个整体，就可以称为集合
	集合是一种容器，用来存储同种数据类型的数据
	
	集合框架：
		集合框架是为表示和操作集合而规定的一种统一的标准的体系结构
		JavaJDK提供了多种不同存储结构的集合容器
		任何集合框架都包含三大块内容：对外的接口、接口的实现和对集合运算的算法
		
2、集合类与接口的基本架构
	java.util.Collection接口（是所有集合框架里的接口与类的根接口）一些 collection 允许有重复的元素，而另一些则不允许
		java.util.List接口（有序的 collection,底层是用数组实现的，可以包含重复的数据）
		java.util.Set接口（一个不包含重复元素的 collection）
		java.util.SortedSet接口（一个进行了总体排序的Set接口）
		java.util.Queue接口（队列，数据添加到队尾，最先添加到队列中的数据最先出来，先进先出）
	java.util.Map接口（键值对存储结构，一个映射不能包含重复的键；每个键最多只能映射到一个值）
		
	重要的类：
	java.util.AbstractCollection抽象类
		java.util.AbstractList抽象类
			java.util.ArrayList类实现了java.util.List接口
			java.util.Vector类（向量，实现了java.util.List接口）
				java.util.Stack类(栈，最先添加的数据在最底层，后进先出)
			java.util.AbstractSequentialList	
				java.util.LinkedList类（链表，链接式的List）
		java.util.AbstractSet抽象类
			java.util.HashSet类，实现了Set接口
			java.util.LinkedHashSet类，实现了Set接口
			java.util.TreeSet类，实现了Set接口
				
	java.util.AbstarctMap抽象类
		java.util.HashMap类 实现了java.util.Map接口
		
	java.util.Dictionary字典类
		java.util.HashTable
		
3、	Collection 接口是一组允许重复的对象。

	Set 接口继承 Collection，但不允许重复，使用自己内部的一个排列机制。

	List 接口继承 Collection，允许重复，以元素安插的次序来放置元素，不会重新排列。

	Map接口是一组成对的键－值对象，即所持有的是key-value pairs。Map中不能有重复的key。拥有自己的内部排列机制
	
	*****所有集合框架存储的数据必须是引用类型的数据
	
4、java.util.HashSet 不允许重复数据，哪怕是添加了多个相同的数据，最终在集合里也只有一个，初始大小为16，增长因子0.75
	add(Object o)添加元素，添加元素是根据hashCode来决定添加到set的哪个位置
	size()获取元素个数
	toArray()转化成Object[] 数组
	isEmpty()判断是否有元素
	clear()清除所有元素
	remove(Object o)移除指定的元素
	contains(Object o)判断是否包含某个元素
	iterator()获取set对应的迭代器：hasNext()方法判断迭代器中是否还有下一个元素，next()方法获取迭代器中的下一个元素
	
	java.util.TreeSet的用法与HashSet基本一致，存储结构也一致，
	但是TreeSet是一个按自然顺序(如果是自定义的类，则必须指定其排序的规则，才能添加到TreeSet)排序的Set，其性能更慢
	
5、什么是哈希码？
	hashCode，java jdk会根据一定的算法生成不同对象所对应的哈希值，这个值可以用于在HashSet, HashMap中找到一个存储的位置
	
	如果自己没有重写Object根类中的hashCode()方法，则由jdk自动生成，也可以由开发者指定某个类的对象所对应的hashCode，此时只需要重写
	hashCode()方法。
	但是一旦重写了hashCode()方法，则需要考虑重写equals方法
	存在一个equals跟 hashCode的协定：
		1)在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。 
		2)如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。 
		3)如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不 要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。
	最最基本的：如果重写了equals，两个对象调用equals作比较相等的话，则需要返回相同的hashCode
		所以重写了equals,则需要重写hashCode
				
6、java.util.Vector向量类，默认大小为10, 不够时每次加1
	顺序存储的列表（底层是用数组来存储元素）
	Vector<Object> v = new Vector<Object>();
	
	add(Object o)添加元素，每添加一个元素都是默认添加到数组的尾部
	size()获取元素个数
	toArray()转化成Object[] 数组
	isEmpty()判断是否有元素
	clear()清除所有元素
	remove(Object o)移除指定的元素
	*remove(int index)根据索引移除指定的元素
	contains(Object o)判断是否包含某个元素
	iterator()获取对应的迭代器：hasNext()方法判断迭代器中是否还有下一个元素，next()方法获取迭代器中的下一个元素
	
	*get(int index)根据索引来获取元素
	*set(int index, Object newObj)设置指定索引的元素为新的值
	*indexOf(Object obj)返回元素所在的索引，如果不存在，则返回-1

7、java.util.ArrayList列表类，默认大小为10, 不够时每次加1
	顺序存储的列表（底层是用数组来存储元素）	
	List<Object> l = new ArrayList<Object>();
	
	add(Object o)添加元素，每添加一个元素都是默认添加到数组的尾部
	size()获取元素个数
	toArray()转化成Object[] 数组
	isEmpty()判断是否有元素
	clear()清除所有元素
	remove(Object o)移除指定的元素
	*remove(int index)根据索引移除指定的元素
	contains(Object o)判断是否包含某个元素
	iterator()获取对应的迭代器：hasNext()方法判断迭代器中是否还有下一个元素，next()方法获取迭代器中的下一个元素
	
	*get(int index)根据索引来获取元素
	*set(int index, Object newObj)设置指定索引的元素为新的值
	*indexOf(Object obj)返回元素所在的索引，如果不存在，则返回-1
	
	java.util.LinkedList是链式存储结构，用法与ArrayList一样
	
8、java.util.Vector和java.util.ArrayList的区别
	1、用法一模一样
	2、Vector是线程安全的，ArrayList是非线程安全的
	3、Vector性能更低，ArrayList性能更好
	
9、java.util.Stack栈， 是java.util.Vector的子类， 默认大小为16
	顺序存储结构
	pop()移出栈顶元素
	peek()选择栈顶元素，不移出
	push()把元素压入到栈顶
	add(int index, Object obj)在指定索引处压入元素，由0开始，从栈底到栈顶
	
10、java.util.HashMap哈希表
	是根据存储的数据的hashcode来确定存储位置的
	
	Map<String, String> map = new HashMap<String, String>();
	
	put(Object key, Object value)存储键值对
	get(Object key)根据键获取值
	
	如何循环整个Map(参见MapTest.java类)
	Set<java.util.Map.Entry<Object, Object>> entrySet = map.entrySet();
	Iterator<Entry<Object, Object>> ite = entrySet.iterator();
	while (ite.hasNext()) {
		Entry<Object, Object> entry = ite.next();
		entry.getKey();
		entry.getValue();
	}

11、java.util.HashTable哈希表
	HashTable<String, String> table = new HashTable<String, String>();

12、HashMap与HashTable的区别
	1）用法一模一样
	2）HashTable是线程安全的，HashMap是非线程安全的
	3）HashTable的性能低，HashMap性能高

13、java.util.Properties
	Properties类专门用来处理.properties配置文件，该配置文件基本结构如下：
	key1=value1
	key2=value2
	key3=value3
	
	Properties prop = new Properties();
	prop.load(InputStream is);// 载入配置文件
	
	prop.getProperty(String key)通过配置文件 中的key获取其值
	详见ConfigUtil.java, ConfigUtilTest.java和config/config.properties文件







	
	
		
				